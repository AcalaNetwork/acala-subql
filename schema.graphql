type KVData @jsonField {
  key: String
  value: String
  type: String
}

type SystemConsts @entity {
  id: ID!
  liquidToken: Token
  stakignToken: Token
  nativeToken: Token
  stableToken: Token
}

type Block @entity {
  id: ID!

  number: BigInt
  timestamp: Date
  parentHash: String
  specVersion: String
  stateRoot: String
  extrinsicRoot: String

  extrinsics: [Extrinsic] @derivedFrom(field: "block")
  events: [Event] @derivedFrom(field: "block")
}

type Extrinsic @entity {
  id: ID!

  method: String
  section: String
  args: [KVData]
  signer: Account
  nonce: BigInt
  timestamp: Date
  signature: String
  tip: String
  isSigned: Boolean
  isSuccess: Boolean

  block: Block
  events: [Event] @derivedFrom(field: "extrinsic")
  calls: [Call] @derivedFrom(field: "extrinsic")
}

type Call @entity {
  id: ID!

  section: String
  method: String
  args:[KVData] 
  timestamp: Date
  isSuccess: Boolean

  signer: Account
  extrinsic: Extrinsic
  parentCall: Call

  calls: [Call] @derivedFrom(field: "parentCall")
}

type Event @entity {
  id: ID!

  index: Int
  section: String
  method: String
  data: [KVData]

  timestamp: Date
  blockNumber: BigInt
  block: Block
  extrinsic: Extrinsic
}

type Account @entity {
  id: ID!

  txCount: BigInt
  createAtBlock: Block

  extrinsics: [Extrinsic] @derivedFrom(field: "signer")
  calls: [Call] @derivedFrom(field: "signer")
  transferIn: [Transfer] @derivedFrom(field: "to")
  transferOut: [Transfer] @derivedFrom(field: "from")
  position: [LoanPosition] @derivedFrom(field: "owner")
}

type Transfer @entity {
  id: ID!

  from: Account
  to: Account
  token: Token
  amount: String
  amountInUSD: String

  extrinsic: Extrinsic
  call: Call
  timestamp: Date
  isSuccess: Boolean
}

type NFTAction @entity {
  id: ID!

  account: Account

  type: String
  subType: String
  data: [KVData]

  extrinsic: Extrinsic
  timestamp: Date
}

type LoanAction @entity {
  id: ID!

  account: Account

  type: String
  subType: String
  data: [KVData]

  extrinsic: Extrinsic
  timestamp: Date
}

type IncentiveAction @entity {
  id: ID!

  account: Account

  type: String
  subType: String
  data: [KVData]

  extrinsic: Extrinsic
  timestamp: Date
}

type HomaAction @entity {
  id: ID!

  account: Account

  type: String
  subType: String
  data: [KVData]

  extrinsic: Extrinsic
  timestamp: Date
}

type OracleFeedRecord @entity {
  id: ID!

  token: Token
  price: String
  provider: String
  account: Account

  blockNumber: BigInt
  block: Block
}

# price
type PriceBundle @entity {
  id: ID!

  ksm: String
}

type PriceRecord @entity {
  id: ID!

  ksm: String
}

# token
type Token @entity {
  id: ID!

  # the token name
  name: String
  # the token decimal
  decimal: Int

  # the price form dex
  price: String

  # total issuance
  issuance: String

  # locked amount in loan
  lockedInLoan: String
  # locked amount in dex
  lockedInDex: String
  # locked amount in incentive
  lockedInIncentive: String

  volume: String
  volumeUSD: String
  txCount: BigInt

  dayData: [TokenDayData] @derivedFrom(field: "token")
  poolDayDataBase: [PoolDayData] @derivedFrom(field: "token0")
  poolDayDataQuote: [PoolDayData] @derivedFrom(field: "token1")
  poolBase: [Pool] @derivedFrom(field: "token0")
  poolQuote: [Pool] @derivedFrom(field: "token1")
}

type TokenDayData @entity {
  id: ID!

  date: Date

  token: Token
  price: String

  # dex tvl
  dailyVolumeToken: String
  dailyVolumeUSD: String
  dailyTxCount: BigInt
}

# loan
type LoanPosition @entity {
  id: ID!

  # the owner of loan
  owner: Account
  # the collateral token
  collateral: Token

  # the debit amount
  debitAmount: String 
  # the collateral amount
  collateralAmount: String

  # the loan params
  # params: LoanParams @derivedFrom(field: "collateral")
}

type TotalLoanPosition @entity {
  id: ID!

  # the collateral token
  collateral: Token

  # the total debit amount
  debitAmount: String
  # the total collateral amount
  collateralAmount: String

  # the loan params
  # params: LoanParams @derivedFrom(field: "collateral")
}

type LoanParams @entity {
  id: ID!

  # the collateral token
  collateral: Token

  debitExchangeRate: String

  # the config start at
  startAtBlockNumber: BigInt
  startAtBlock: Block

  maximumTotalDebitValue: String
  interestRatePerSec: String
  liquidationRatio: String
  liquidationPenalty: String
  requiredCollateralRatio: String
  globalInterestRatePerSec: String
}

type LoanParamsHistory @entity {
  id: ID!

  # the collateral token
  collateral: Token

  # the config start at
  startAtBlockNumber: BigInt
  startAtBlock: Block
  # the config end at
  endAtBlockNumber: BigInt
  endAtBlock: Block

  maximumTotalDebitValue: String
  interestRatePerSec: String
  liquidationRatio: String
  liquidationPenalty: String
  requiredCollateralRatio: String
  globalInterestRatePerSec: String
}


# dex
type ProvisionPool @entity {
  id: ID!

  # the pool token
  poolToken: Token
  # the pool token0
  token0: Token
  # the pool token1
  token1: Token

  # token0 amount
  token0Amount: String
  # token1 amount
  token1Amount: String

  # initialize share amount when begin
  initializeShare: String

  # which block started
  startAtBlockNumber: BigInt
  startAtBlock: Block

  # which block ended
  endAtBlockNumber: BigInt
  endAtBlock: Block

  # total transition count
  txCount: BigInt

  # user records
  records: [UserProvision] @derivedFrom(field: "pool")
}

type UserProvision @entity {
  id: ID!

  pool: ProvisionPool
  token0: Token
  token1: Token

  token0Amount: String
  token1Amount: String
}

type Pool @entity {
  id: ID!

  token0: Token
  token1: Token

  # avaiable token0 amount
  token0Amount: String
  # avaiable token1 amount
  token1Amount: String

  # the exchange ratio token0:token1
  exchange0: String
  # the exchange ratio token1:token0
  exchange1: String

  # the fee rate of pool
  fee: String

  # token0 swap volume
  token0Volume: String
  # token1 swap volume
  token1Volume: String
  # total swap volume in usd
  volumeUSD: String

  # token0 total value of locked
  token0TVL: String
  # token1 total value of locked
  token1TVL: String
  # total value of locked
  tvlUSD: String

  # tx count
  txCount: BigInt

  hourData: [PoolHourData] @derivedFrom(field: "pool")
  dayData: [PoolDayData] @derivedFrom(field: "pool")
  actions: [DexAction] @derivedFrom(field: "pool")
}

type PoolHourData @entity {
  id: ID!

  pool: Pool
  date: Date

  token0: Token
  token1: Token

  token0Amount: String
  token1Amount: String
  exchange0: String
  exchange1: String

  volumeToken0: String
  volumeToken1: String
  volumeUSD: String

  txCount: BigInt

  tvlUSD: String

  token0Open: String
  token0High: String
  token0Low: String
  token0Close: String
}

type PoolDayData @entity {
  id: ID!

  pool: Pool
  token0: Token!
  token1: Token!

  date: Date

  token0Amount: String
  token1Amount: String
  exchange0: String
  exchange1: String

  volumeToken0: String
  volumeToken1: String
  volumeUSD: String

  txCount: BigInt

  tvlUSD: String

  token0Open: String
  token0High: String
  token0Low: String
  token0Close: String
}

type Dex @entity {
  id: ID!

  poolCount: Int

  totalVolumeUSD: String
  totalTVLUSD: String
}

type DexDayData @entity {
  id: ID!

  poolCount: Int
  date: Date

  dailyVolumeUSD: String

  totalVolumeUSD: String
  totalTVLUSD: String
}

type DexAction @entity {
  id: ID!

  account: Account

  type: String
  subType: String
  data: [KVData]

  pool: Pool
  token0: Token
  token1: Token
  token0Amount: String
  token1Amount: String
  volumeUSD: String

  extrinsic: Extrinsic
  timestamp: Date
}
