type Block @entity {
  id: ID!

  number: BigInt
  timestamp: Date
  parentHash: String
  specVersion: Int

  extrinsics: [Extrinsic] @derivedFrom(field: "block")
  events: [Event] @derivedFrom(field: "block")
}

type Extrinsic @entity {
  id: ID!

  method: String
  section: String
  args: String
  signer: String
  nonce: BigInt
  timestamp: Date
  isSigned: Boolean
  signature: String
  tip: BigInt

  block: Block #create relation to block

  events: [Event] @derivedFrom(field: "extrinsic")
  calls: [Call] @derivedFrom(field: "extrinsic")
}

type Event @entity {
  id: ID!

  index: Int!
  section: String!
  method: String!
  data: String!

  block: Block #create relation to block
  extrinsic: Extrinsic #create relation to extrins
}

type Call @entity {
  id: ID!

  section: String
  method: String
  args: String

  extrinsic: Extrinsic #create relation to extrinsic
  parentCall: Call #create relation to call

  calls: [Call] @derivedFrom(field: "parentCall")
}

type Account @entity {
  id: ID!

  transfers: [Transfer] @derivedFrom(field: "account")
}

type Token @entity {
  id: ID!

  decimal: Int!
  name: String!
  totalIssued: BigInt!
}

type TransferDayData @entity {
  id: ID!
  date: Int!

  token: String!
  totalVolumn: BigInt!
  transferCount: Int!
}

type Transfer @entity {
  id: ID!

  account: Account
  from: Account
  to: Account
  token: Token
  amount: BigInt

  extrinsic: Extrinsic
  call: Call
}

type LoanDayData @entity {
  id: ID!

  token: String!
  timestamp: Date!

  collateral: BigInt!
  debit: BigInt!
}

type LoanPosition @entity {
  id: ID!

  account: String!
  token: String!

  debit: BigInt!
  collateral: BigInt!
  collateralRatio: BigInt!
}

type LoanAction @entity {
  id: ID!
  isBatch: Int!
  isSudo: Int!
  isSuccess: Int!

  block: String!
  extrinsicHash: String!
  timestamp: Date!

  account: String!
  token: String!
  collateralAdjustment: BigInt!
  debitAdjustment: BigInt!
  debitExchangeRate: BigInt!
}

type Pair @entity {
  id: ID!

  token0: String!
  token1: String!
  totalSupply: BigInt!

  token0Volume: BigInt!
  token1Volume: BigInt!

  token0USD: BigInt!
  token1USD: BigInt!

  token0Price: BigInt!
  token1Price: BigInt!

  txCount: BigInt!
}

type SwapAction @entity {
  id: ID!
  isBatch: Int!
  isSudo: Int!
  isSuccess: Int!

  block: String!
  extrinsicHash: String!
  timestamp: Date!

  account: String!
  type: String!
  path: String!
  token0: String!
  token1: String!
  token0Input: String!
  token1Input: String!
  result: String!
}

type AddLiquidityHistory @entity {
  id: ID!
  isBatch: Int!
  isSudo: Int!
  isSuccess: Int!

  block: String!
  extrinsicHash: String!
  timestamp: Date!

  account: String!
  token0: String!
  token1: String!

  token0Input: BigInt!
  token1Input: BigInt!

  token0Amount: BigInt!
  token1Amount: BigInt!
  receivedShare: BigInt!
}

type RemoveLiquidityHistoryEntity @entity {
  id: ID!
  isBatch: Int!
  isSudo: Int!
  isSuccess: Int!

  block: String!
  timestamp: Date!

  account: String!
  token0: String!
  token1: String!
  removedShare: BigInt!

  token0Amount: BigInt!
  token1Amount: BigInt!
}
