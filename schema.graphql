type KVData @jsonField {
  key: String
  value: String
  type: String
}

type SystemConsts @entity {
  id: ID!
  liquidToken: Token
  stakignToken: Token
  nativeToken: Token
  stableToken: Token
}

type Block @entity {
  id: ID!

  number: BigInt
  timestamp: Date
  parentHash: String
  specVersion: String
  stateRoot: String
  extrinsicRoot: String

  extrinsics: [Extrinsic] @derivedFrom(field: "block")
  events: [Event] @derivedFrom(field: "block")
}

type Extrinsic @entity {
  id: ID!

  method: String
  section: String
  args: [KVData]
  signer: Account
  nonce: BigInt
  timestamp: Date
  signature: String
  tip: String
  isSigned: Boolean
  isSuccess: Boolean

  block: Block
  events: [Event] @derivedFrom(field: "extrinsic")
  calls: [Call] @derivedFrom(field: "extrinsic")
}

type Call @entity {
  id: ID!

  section: String
  method: String
  args:[KVData] 
  timestamp: Date
  isSuccess: Boolean

  signer: Account
  extrinsic: Extrinsic
  parentCall: Call

  calls: [Call] @derivedFrom(field: "parentCall")
}

type Event @entity {
  id: ID!

  index: Int
  section: String
  method: String
  data: [KVData]

  timestamp: Date
  blockNumber: BigInt
  block: Block
  extrinsic: Extrinsic
}

type Account @entity {
  id: ID!

  txCount: Int
  createAtBlock: Block

  extrinsics: [Extrinsic] @derivedFrom(field: "signer")
  calls: [Call] @derivedFrom(field: "signer")
  transferIn: [Transfer] @derivedFrom(field: "to")
  transferOut: [Transfer] @derivedFrom(field: "from")
  position: [LoanPosition] @derivedFrom(field: "account")
}

type Token @entity {
  id: ID!

  name: String!
  decimal: Int

  isDexShare: Boolean

  issuance: String
  price: String
}

type Balance @entity {
  id: ID!

  account: Account
  token: Token

  total: String
  balance: String
  incentive: String
  collateral: String
}


type BalanceChangedRecord @entity {
  id: ID!

  account: Account
  token: Token

  total: String
  balance: String
  incentive: String
  collateral: String

  blockNumber: BigInt
  block: Block
}

type TotalBalanceChangedRecord @entity {
  id: ID!

  token: Token

  balance: String

  blockNumber: BigInt
  block: Block
}


type Transfer @entity {
  id: ID!

  from: Account
  to: Account
  token: Token
  amount: String
  amountInUSD: String

  extrinsic: Extrinsic
  call: Call
  timestamp: Date
  isSuccess: Boolean
}

type LoanPosition @entity {
  id: ID!

  account: Account
  token: Token

  debit: String 
  collateral: String 
}

type TotalLoanPosition @entity {
  id: ID!

  token: Token

  debit: String
  collateral: String
}

type LoanAction @entity {
  id: ID!

  account: Account

  type: String
  subType: String
  data: [KVData]

  extrinsic: Extrinsic
  timestamp: Date
}

type DexAction @entity {
  id: ID!

  account: Account

  type: String
  subType: String
  data: [KVData]

  extrinsic: Extrinsic
  timestamp: Date
}

type IncentiveAction @entity {
  id: ID!

  account: Account

  type: String
  subType: String
  data: [KVData]

  extrinsic: Extrinsic
  timestamp: Date
}

type HomaAction @entity {
  id: ID!

  account: Account

  type: String
  subType: String
  data: [KVData]

  extrinsic: Extrinsic
  timestamp: Date
}

type OracleFeedRecord @entity {
  id: ID!

  token: Token
  price: String
  provider: String
  account: Account

  blockNumber: BigInt
  block: Block
}

type PriceBundle @entity {
  id: ID!

  ksm: String!
}

type PriceRecord @entity {
  id: ID!

  prices: [KVData]
}


# dex
type Pool @entity {
  id: ID!

  token0: Token!
  token1: Token!

  token0Amount: String!
  token1Amount: String!
  token0Price: String!
  token1Price: String!

  token0Volumn: String!
  token1Volumn: String!
  volumnUSD: String!

  token0TVL: String!
  token1TVL: String!
  tvlUSD: String!

  txCount: Int!
  userCount: Int!

  hourData: [PoolHourData] @derivedFrom(field: "pool")
  dayData: [PoolDayData] @derivedFrom(field: "pool")
}

type PoolHourData @entity {
  id: ID!

  pool: Pool!

  token0: Token!
  token1: Token!

  token0Amount: String!
  token1Amount: String!
  token0Price: String!
  token1Price: String!

  volumnToken0: String!
  volumnToken1: String!
  volumnUSD: String!

  txCount: Int!

  tvlUSD: String!

  token0Open: String! 
  token0High: String!
  token0Low: String!
  token0Close: String!
}

type PoolDayData @entity {
  id: ID!

  pool: Pool!

  token0: Token!
  token1: Token!

  token0Amount: String!
  token1Amount: String!
  token0Price: String!
  token1Price: String!

  volumnToken0: String!
  volumnToken1: String!
  volumnUSD: String!

  txCount: Int!

  tvlUSD: String!

  token0Open: String! 
  token0High: String!
  token0Low: String!
  token0Close: String!
}

type DexDayData @entity {
  id: ID!

  date: Date!
  tvlUSD: String!
  volumnUSD: String!
  txCount: Int!
}

type Summary @entity {
  id: ID!

  crossedKSMAmount: String
  treasury: String
  accounts: Int
  transitions: Int
  transfers: Int
  crossChainMessage: Int
}

type SummaryDayData @entity {
  id: ID!

  date: Date
  crossedKSMAmount: String
  treasury: String
  accounts: Int
  transitions: Int
  transfers: Int
  crossChainMessage: Int
}